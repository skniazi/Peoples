{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","names","id","name","email","CardList","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","user","setState","this","filteredNames","filter","toLowerCase","includes","class","e","target","value","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAGaA,G,kBAAO,SAACC,GAAD,OAGR,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,MAAMC,GAAtC,4BACrB,4BAAKL,EAAMI,MAAME,MACjB,2BAAIN,EAAMI,MAAMG,UCLnBC,EAAW,SAACR,GAErB,OAAO,yBAAKC,UAAU,aACjBD,EAAMI,MAAMK,IAAI,SAAAH,GAAI,OACf,kBAAC,EAAD,CAAMI,IAAKJ,EAAKD,GAAID,MAAOE,QCL5BK,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAErB,2BACKZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+BJG,E,YAjCb,aACC,IAAD,8BACI,+CAEKC,MAAQ,CACXb,MAAO,GACPc,YAAa,IALnB,E,iFASoB,IAAD,OACjBC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACpB,MAAMmB,Q,+BAK5B,IAAD,SACsBE,KAAKR,MAA1Bb,EADD,EACCA,MAAMc,EADP,EACOA,YACPQ,EAAgBtB,EAAMuB,OAAO,SAAAvB,GAAK,OAAIA,EAAME,KAAKsB,cAAcC,SAASX,EAAYU,iBAE1F,OACE,yBAAK3B,UAAU,OACb,2CACA,kBAAC,EAAD,CAAW6B,MAAM,SAASlB,YAAY,gBAAgBC,aAAc,SAAAkB,GAAM,EAAKP,SAAS,CAACN,YAAYa,EAAEC,OAAOC,OAAQ,kBAAMC,QAAQC,IAAI,EAAKlB,YAC7I,kBAAC,EAAD,CAAUb,MAAOsB,S,GA5BPU,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.9bfa4234.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    \r\n       \r\n            <div className='card-container'>\r\n                <img alt='people' src={`https://robohash.org/${props.names.id}?set=set2&size=180x180`} />\r\n                <h2>{props.names.name}</h2>\r\n                <p>{props.names.email}</p>\r\n             </div>\r\n        \r\n        \r\n    \r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from'../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n    //console.log(props);\r\n    return <div className='card-list'>\r\n        {props.names.map(name=> (\r\n              <Card key={name.id} names={name}/>\r\n          ))} \r\n    </div>\r\n}\r\n\r\n","import React from 'react';\r\nimport '../search-box/search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n\r\n    <input\r\n         className='search'\r\n         type='search' \r\n         placeholder={placeholder} \r\n         onChange={handleChange} />\r\n\r\n)","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component{\n\n  constructor()\n  {\n      super();\n\n      this.state = {\n        names: [],\n        searchField: ''\n      };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(user => this.setState({names:user}));\n  }\n\n \n\n  render(){\n    const {names,searchField} = this.state;\n    const filteredNames = names.filter(names => names.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1>Peoples API</h1>\n        <SearchBox class=\"search\" placeholder='Search People' handleChange={e => {this.setState({searchField:e.target.value}, () => console.log(this.state));}} />\n        <CardList names={filteredNames} />\n      </div>\n    )\n  };\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}